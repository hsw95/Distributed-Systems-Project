
trigger:
    - dev
   
pr:
  - master

resources:
- repo: self

variables:

  project: 'phonebook'
  dockerRegistryServiceConnection: 'pavan-dockerhub'
  containerRegistry: 'Container Registry'
  imageRepository: 'aletipavan/phonemysql' 
  dockerFilePath: 'Dockerfile-mysql'
  tag: 'latest'
  tag_buildnumber: $(Build.BuildNumber)

  

  trivyVersion: 0.12.0


  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:

    - task: Docker@2
      displayName: Login to DockerHub 
      inputs:
        command: login
        containerRegistry: $(dockerRegistryServiceConnection)

    - task: Docker@2
      displayName: Docker Build
      inputs:
        command: build
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageRepository)
        Dockerfile: $(dockerFilePath)
        tags: |
            $(tag)
            $(tag_buildnumber)

  - job: Scan
    dependsOn: Build
    steps:
    - script: |
        sudo apt-get install rpm
        wget https://github.com/aquasecurity/trivy/releases/download/v$(trivyVersion)/trivy_$(trivyVersion)_Linux-64bit.deb
        sudo dpkg -i trivy_$(trivyVersion)_Linux-64bit.deb
        trivy -v
      displayName: 'Setup Trivy Image Scanner'

    - task: CmdLine@2
      displayName: "Run trivy Image scan"
      inputs:
        script: |
            trivy image --exit-code 0 --severity LOW,MEDIUM $(imageRepository):$(tag)
            trivy image --exit-code 0 --severity HIGH,CRITICAL $(imageRepository):$(tag)

  - job: Push
    dependsOn: Scan
    steps:
    ## Docker Push
    - task: Docker@2
      displayName: Push Docker Image
      inputs:
        command: push
        containerRegistry: $(dockerRegistryServiceConnection)
        # repository: $(imageRepository)
        tags: |
          $(tag)
          $(tag_buildnumber)

    ## Logout of Docker Hub
    - task: Docker@2
      displayName: Logout of DockerHub
      inputs:
        command: logout
        containerRegistry: $(dockerRegistryServiceConnection)

    ## Artifact to drop folder
    - task: CopyFiles@2
      displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
      inputs:
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'